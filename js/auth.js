// Конфигурация
const API_URL = 'http://localhost:3000';
const MAX_USERNAME_ATTEMPTS = 5;
const COMMON_PASSWORDS = ['password', '12345678', 'qwerty123', 'admin123', 'welcome1'];

// DOM элементы
const registerForm = document.getElementById('registerForm');
const loginForm = document.getElementById('loginForm');

// Инициализация
document.addEventListener('DOMContentLoaded', function() {
  checkAuthState(); // Добавлена эта строка
  if (registerForm) initRegistrationForm();
  if (loginForm) initLoginForm();
});

function checkAuthState() {
  const user = JSON.parse(sessionStorage.getItem('currentUser'));
  const loginContainer = document.getElementById('loginContainer');
  
  if (user) {
    // Пользователь вошел — скрываем форму входа
    if (loginContainer) {
      loginContainer.style.display = 'none';
    }
    
    showUserPanel(user);
    
    // Если админ — показываем ссылку на админ-панель
    if (user.role === 'admin') {
      addAdminPanelLink();
    }
  }
}

// Добавление кнопки админ-панели
function addAdminPanelLink() {
  const adminLink = document.getElementById('adminPanelLink');
  if (adminLink) {
    adminLink.style.display = 'block';
  }
}

function initRegistrationForm() {
  const passwordOptionRadios = document.querySelectorAll('input[name="passwordOption"]');
  const manualPasswordFields = document.querySelectorAll('.manual-password');
  const generateUsernameBtn = document.getElementById('generateUsername');
  const usernameInput = document.getElementById('username');
  const attemptsLeftSpan = document.getElementById('attemptsLeft');
  const registerBtn = document.getElementById('registerBtn');
  
  let usernameAttempts = MAX_USERNAME_ATTEMPTS;
  let autoGeneratedPassword = generatePassword();

  // Делаем кнопку всегда активной
  registerBtn.disabled = false;

  // Переключение режима пароля
  passwordOptionRadios.forEach(radio => {
    radio.addEventListener('change', function() {
      const isManual = this.value === 'manual';
      manualPasswordFields.forEach(field => {
        field.style.display = isManual ? 'block' : 'none';
      });
    });
  });

  // Генерация username только по кнопке
  generateUsernameBtn.addEventListener('click', function() {
    if (usernameAttempts <= 0) {
      usernameInput.readOnly = false;
      generateUsernameBtn.disabled = true;
      usernameInput.placeholder = "Введите свой никнейм";
      return;
    }

    const firstName = document.getElementById('firstName').value.trim() || 'User';
    const lastName = document.getElementById('lastName').value.trim() || 'Name';
    
    const firstPart = firstName.slice(0, Math.min(3, firstName.length));
    const lastPart = lastName.slice(0, Math.min(3, lastName.length));
    const randomNum = Math.floor(Math.random() * 900) + 100;
    const separators = ['', '_', '.', '-'];
    const separator = separators[Math.floor(Math.random() * separators.length)];
    
    const generatedUsername = `${firstPart}${separator}${lastPart}${randomNum}`.toLowerCase();
    usernameInput.value = generatedUsername;
    usernameAttempts--;
    attemptsLeftSpan.textContent = usernameAttempts;
    
    // Очищаем ошибку при генерации
    clearError('usernameError');
  });

  // Очищаем ошибки при вводе
  registerForm.querySelectorAll('input').forEach(input => {
    input.addEventListener('input', function() {
      clearError(this.id + 'Error');
    });
  });

  // Обработка отправки формы
  registerForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Валидируем форму только при отправке
    const isValid = await validateFormOnSubmit();
    
    if (!isValid) return;
    
    const password = document.querySelector('input[name="passwordOption"]:checked').value === 'auto' 
      ? autoGeneratedPassword 
      : document.getElementById('password').value;

    const userData = {
      firstName: document.getElementById('firstName').value,
      lastName: document.getElementById('lastName').value,
      middleName: document.getElementById('middleName').value || null,
      email: document.getElementById('email').value,
      phone: document.getElementById('phone').value,
      birthDate: document.getElementById('birthDate').value,
      username: document.getElementById('username').value,
      password: password,
      agreedToTerms: true,
      createdAt: new Date().toISOString(),
      role: 'customer'
    };

    try {
      const response = await fetch(`${API_URL}/users`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      });

      if (response.ok) {
        alert('Регистрация успешна!');
        window.location.href = 'signin.html';
      } else {
        const errorData = await response.json();
        handleRegistrationError(errorData);
      }
    } catch (error) {
      console.error('Ошибка регистрации:', error);
      alert('Ошибка регистрации. Пожалуйста, попробуйте позже.');
    }
  });

  // Валидация только при отправке формы
  async function validateFormOnSubmit() {
    let isValid = true;
    
    // Очищаем все ошибки перед новой проверкой
    clearAllErrors();

    // Проверка обязательных полей
    isValid = validateField('firstName', value => value.length >= 2, 'Имя должно содержать минимум 2 символа') && isValid;
    isValid = validateField('lastName', value => value.length >= 2, 'Фамилия должна содержать минимум 2 символа') && isValid;
    isValid = validateEmail() && isValid;
    isValid = validatePhone() && isValid;
    isValid = validateBirthDate() && isValid;
    isValid = await validateUsername() && isValid;
    isValid = validatePassword() && isValid;
    isValid = validateAgreement() && isValid;
    
    return isValid;
  }

  function clearAllErrors() {
    const errorElements = document.querySelectorAll('.error-message');
    errorElements.forEach(element => {
      element.textContent = '';
      element.style.display = 'none';
      const inputBox = element.closest('.input-box');
      if (inputBox) {
        inputBox.classList.remove('error');
      }
    });
  }

  function validateEmail() {
    const email = document.getElementById('email').value;
    if (!email) {
      showError('emailError', 'Email обязателен');
      return false;
    }
    
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!regex.test(email)) {
      showError('emailError', 'Введите корректный email');
      return false;
    }
    return true;
  }

  function validatePhone() {
    const phone = document.getElementById('phone').value;
    if (!phone) {
      showError('phoneError', 'Телефон обязателен');
      return false;
    }
    
    const regex = /^\+375(25|29|33|44)\d{7}$/;
    if (!regex.test(phone)) {
      showError('phoneError', 'Введите номер в формате +375XXXXXXXXX');
      return false;
    }
    return true;
  }

  function validateBirthDate() {
    const birthDateInput = document.getElementById('birthDate');
    if (!birthDateInput.value) {
      showError('birthDateError', 'Дата рождения обязательна');
      return false;
    }

    const birthDate = new Date(birthDateInput.value);
    const minDate = new Date();
    minDate.setFullYear(minDate.getFullYear() - 16);
    
    if (birthDate > minDate) {
      showError('birthDateError', 'Вам должно быть не менее 16 лет');
      return false;
    }
    return true;
  }

  async function validateUsername() {
    const username = document.getElementById('username').value;
    if (!username) {
      showError('usernameError', 'Никнейм обязателен');
      return false;
    }
    
    try {
      const response = await fetch(`${API_URL}/users?username=${username}`);
      const users = await response.json();
      if (users.length > 0) {
        showError('usernameError', 'Этот никнейм уже занят');
        return false;
      }
    } catch (error) {
      console.error('Ошибка проверки никнейма:', error);
      showError('usernameError', 'Ошибка проверки никнейма');
      return false;
    }
    
    return true;
  }

  function validatePassword() {
    if (document.querySelector('input[name="passwordOption"]:checked').value === 'auto') {
      return true;
    }

    const password = document.getElementById('password').value;
    const repeatPassword = document.getElementById('repeatPassword').value;
    let isValid = true;

    if (!password) {
      showError('passwordError', 'Пароль обязателен');
      isValid = false;
    } else if (password.length < 8 || password.length > 20) {
      showError('passwordError', 'Пароль должен быть 8-20 символов');
      isValid = false;
    } else if (!/[A-Z]/.test(password)) {
      showError('passwordError', 'Добавьте заглавную букву');
      isValid = false;
    } else if (!/[a-z]/.test(password)) {
      showError('passwordError', 'Добавьте строчную букву');
      isValid = false;
    } else if (!/[0-9]/.test(password)) {
      showError('passwordError', 'Добавьте цифру');
      isValid = false;
    } else if (!/[!@#$%^&*()]/.test(password)) {
      showError('passwordError', 'Добавьте спецсимвол');
      isValid = false;
    } else if (COMMON_PASSWORDS.includes(password.toLowerCase())) {
      showError('passwordError', 'Пароль слишком простой');
      isValid = false;
    }

    if (!repeatPassword) {
      showError('repeatPasswordError', 'Повторите пароль');
      isValid = false;
    } else if (password !== repeatPassword) {
      showError('repeatPasswordError', 'Пароли не совпадают');
      isValid = false;
    }

    return isValid;
  }

  function validateAgreement() {
    if (!document.getElementById('agree').checked) {
      showError('agreeError', 'Необходимо согласие с правилами');
      return false;
    }
    return true;
  }

  function generatePassword() {
    const uppercase = 'ABCDEFGHJKLMNPQRSTUVWXYZ';
    const lowercase = 'abcdefghijkmnopqrstuvwxyz';
    const numbers = '23456789';
    const symbols = '!@#$%^&*';
    
    let password = '';
    password += getRandomChar(uppercase);
    password += getRandomChar(lowercase);
    password += getRandomChar(numbers);
    password += getRandomChar(symbols);
    
    const allChars = uppercase + lowercase + numbers + symbols;
    while (password.length < 12) {
      password += getRandomChar(allChars);
    }
    
    return password.split('').sort(() => Math.random() - 0.5).join('');
  }

  function getRandomChar(str) {
    return str[Math.floor(Math.random() * str.length)];
  }

  function validateField(fieldId, validationFn, errorMessage = 'Обязательное поле') {
    const field = document.getElementById(fieldId);
    const value = field.value.trim();
    
    if (!value) {
      showError(fieldId + 'Error', errorMessage);
      return false;
    }
    
    if (!validationFn(value)) {
      showError(fieldId + 'Error', errorMessage);
      return false;
    }
    
    return true;
  }

  function handleRegistrationError(errorData) {
    if (errorData.email) showError('emailError', errorData.email);
    if (errorData.username) showError('usernameError', errorData.username);
    if (errorData.phone) showError('phoneError', errorData.phone);
  }
}

function showError(elementId, message) {
    const element = document.getElementById(elementId);
    if (element) {
      element.textContent = message;
      element.style.display = 'block';
      
      // Добавляем класс error к родительскому контейнеру
      const inputBox = element.closest('.input-box');
      if (inputBox) {
        inputBox.classList.add('error');
      }
    }
  }

  function clearError(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
      element.textContent = '';
      element.style.display = 'none';
      
      // Убираем класс error с родительского контейнера
      const inputBox = element.closest('.input-box');
      if (inputBox) {
        inputBox.classList.remove('error');
      }
    }
  }

function initLoginForm() {
  console.log('Login form initialized');
  
  loginForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const login = document.getElementById('login').value;
    const password = document.getElementById('password').value;

    // Очищаем предыдущие ошибки
    clearError('loginError');
    clearError('passwordError');

    try {
      const response = await fetch(`${API_URL}/users`);
      
      if (!response.ok) {
        throw new Error('Ошибка сервера');
      }
      
      const allUsers = await response.json();
      
      // Ищем пользователя
      const user = allUsers.find(u => 
        (u.email && u.email.toLowerCase() === login.toLowerCase()) || 
        (u.username && u.username.toLowerCase() === login.toLowerCase())
      );
      
      if (!user) {
        // Показываем ошибку в поле логина
        showError('loginError', 'Неверный логин или пароль');
        return;
      }

      // Проверяем пароль
      if (user.password !== password) {
        // Показываем ошибку в поле пароля
        showError('passwordError', 'Неверный пароль');
        return;
      }

      // Успешный вход - показываем alert
      sessionStorage.setItem('currentUser', JSON.stringify(user));
      alert(`Добро пожаловать, ${user.firstName || user.username}!`);
      
      // Перенаправляем
      window.location.href = 'index.html';

    } catch (error) {
      console.error('Login error:', error);
      showError('loginError', 'Ошибка при входе. Пожалуйста, попробуйте позже.');
    }
  });
}


function showSuccessMessage(message) {
  const alertDiv = document.createElement('div');
  alertDiv.className = 'login-alert success';
  alertDiv.textContent = message;
  document.body.appendChild(alertDiv);
  
  setTimeout(() => {
    alertDiv.remove();
  }, 3000);
}

function showUserPanel(user) {
  const loginContainer = document.getElementById('loginContainer');
  const userPanel = document.getElementById('userPanel');
  
  if (loginContainer) loginContainer.style.display = 'none';
  if (userPanel) {
    userPanel.style.display = 'block';
    document.getElementById('userName').textContent = user.firstName || user.username;
    document.getElementById('userEmail').textContent = user.email;
    document.getElementById('userRole').textContent = user.role;
    
    // Показываем кнопку админ-панели если пользователь админ
    if (user.role === 'admin') {
      document.getElementById('adminPanelLink').style.display = 'inline-block';
    }
    
    // Обработчики для кнопок
    document.getElementById('logoutBtn').addEventListener('click', logout);
    document.getElementById('viewProfileBtn').addEventListener('click', () => {
      alert(`Profile info:\nName: ${user.firstName} ${user.lastName}\nEmail: ${user.email}\nPhone: ${user.phone}`);
    });
    
    document.getElementById('changePasswordBtn').addEventListener('click', () => {
      const newPassword = prompt('Enter new password:');
      if (newPassword && newPassword.length >= 8) {
        alert('Password changed successfully!');
        // Здесь можно добавить логику обновления пароля в базе данных
      } else {
        alert('Password must be at least 8 characters long');
      }
    });
  }
}

function logout() {
  // Получаем текущего пользователя перед выходом
  const user = JSON.parse(sessionStorage.getItem('currentUser'));
  const userName = user ? (user.firstName || user.username) : 'Пользователь';
  
  sessionStorage.removeItem('currentUser');
  const loginContainer = document.getElementById('loginContainer');
  const userPanel = document.getElementById('userPanel');
  
  if (loginContainer) loginContainer.style.display = 'block';
  if (userPanel) userPanel.style.display = 'none';
  
  // Показываем alert о выходе
  alert(`До свидания, ${userName}! Вы успешно вышли из системы.`);
  
  // Обновляем страницу
  setTimeout(() => {
    window.location.reload();
  }, 500);
}