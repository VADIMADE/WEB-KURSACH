//Конфигурация
const API_URL = 'http://localhost:3000';
const MAX_USERNAME_ATTEMPTS = 5;
const COMMON_PASSWORDS = ['password', '12345678', 'qwerty123', 'admin123', 'welcome1'];

//DOM элементы
const registerForm = document.getElementById('registerForm');
const loginForm = document.getElementById('loginForm');

//Инициализация
document.addEventListener('DOMContentLoaded', function() {
  checkAuthState();
  if (registerForm) initRegistrationForm();
  if (loginForm) initLoginForm();
});

function checkAuthState() {
  const user = JSON.parse(localStorage.getItem('currentUser'));
  const loginContainer = document.getElementById('loginContainer');
  
  if (user) {
    if (loginContainer) {
      loginContainer.style.display = 'none';
    }
    
    showUserPanel(user);
    initChangePasswordModal(); // Инициализируем модальное окно
    
    if (user.role === 'admin') {
      addAdminPanelLink();
    }
  }
}

function addAdminPanelLink() {
  const adminLink = document.getElementById('adminPanelLink');
  if (adminLink) {
    adminLink.style.display = 'block';
  }
}

function initRegistrationForm() {
  const passwordOptionRadios = document.querySelectorAll('input[name="passwordOption"]');
  const manualPasswordFields = document.querySelectorAll('.manual-password');
  const generateUsernameBtn = document.getElementById('generateUsername');
  const usernameInput = document.getElementById('username');
  const attemptsLeftSpan = document.getElementById('attemptsLeft');
  const registerBtn = document.getElementById('registerBtn');
  
  let usernameAttempts = MAX_USERNAME_ATTEMPTS;
  let autoGeneratedPassword = generatePassword();

  registerBtn.disabled = false;

  passwordOptionRadios.forEach(radio => {
    radio.addEventListener('change', function() {
      const isManual = this.value === 'manual';
      manualPasswordFields.forEach(field => {
        field.style.display = isManual ? 'block' : 'none';
      });
    });
  });

  generateUsernameBtn.addEventListener('click', function() {
    if (usernameAttempts <= 0) {
      usernameInput.readOnly = false;
      generateUsernameBtn.disabled = true;
      usernameInput.placeholder = "Enter your nickname";
      return;
    }

    const firstName = document.getElementById('firstName').value.trim() || 'User';
    const lastName = document.getElementById('lastName').value.trim() || 'Name';
    
    const firstPart = firstName.slice(0, Math.min(3, firstName.length));
    const lastPart = lastName.slice(0, Math.min(3, lastName.length));
    const randomNum = Math.floor(Math.random() * 900) + 100;
    const separators = ['', '_', '.', '-'];
    const separator = separators[Math.floor(Math.random() * separators.length)];
    
    const generatedUsername = `${firstPart}${separator}${lastPart}${randomNum}`.toLowerCase();
    usernameInput.value = generatedUsername;
    usernameAttempts--;
    attemptsLeftSpan.textContent = usernameAttempts;
    
    clearError('usernameError');
  });

  registerForm.querySelectorAll('input').forEach(input => {
    input.addEventListener('input', function() {
      clearError(this.id + 'Error');
    });
  });

  registerForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const isValid = await validateFormOnSubmit();
    
    if (!isValid) return;
    
    const password = document.querySelector('input[name="passwordOption"]:checked').value === 'auto' 
      ? autoGeneratedPassword 
      : document.getElementById('password').value;

    const usersResponse = await fetch(`${API_URL}/users`);
    const usersList = await usersResponse.json();
    const maxId = usersList.reduce((max, user) => {
      const userId = parseInt(user.id);
      return !isNaN(userId) && userId > max ? userId : max;
    }, 0);
    const nextId = maxId + 1;

    const userData = {
      id: nextId,
      firstName: document.getElementById('firstName').value,
      lastName: document.getElementById('lastName').value,
      middleName: document.getElementById('middleName').value || null,
      email: document.getElementById('email').value,
      phone: document.getElementById('phone').value,
      birthDate: document.getElementById('birthDate').value,
      username: document.getElementById('username').value,
      password: password,
      agreedToTerms: true,
      createdAt: new Date().toISOString(),
      role: 'customer'
    };

    try {
      const response = await fetch(`${API_URL}/users`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      });

      if (response.ok) {
        alert('Registration successful!');
        window.location.href = 'signin.html';
      } else {
        const errorData = await response.json();
        handleRegistrationError(errorData);
      }
    } catch (error) {
      console.error('Registration error:', error);
      alert('Registration error. Please try again later.');
    }
  });

  async function validateFormOnSubmit() {
    let isValid = true;
    clearAllErrors();

    isValid = validateField('firstName', value => value.length >= 2, 'First name must be at least 2 characters') && isValid;
    isValid = validateField('lastName', value => value.length >= 2, 'Last name must be at least 2 characters') && isValid;
    isValid = await validateEmail() && isValid;
    isValid = await validatePhone() && isValid;
    isValid = validateBirthDate() && isValid;
    isValid = await validateUsername() && isValid;
    isValid = validatePassword() && isValid;
    isValid = validateAgreement() && isValid;
    
    return isValid;
  }

  function clearAllErrors() {
    const errorElements = document.querySelectorAll('.error-message');
    errorElements.forEach(element => {
      element.textContent = '';
      element.style.display = 'none';
      const inputBox = element.closest('.input-box');
      if (inputBox) {
        inputBox.classList.remove('error');
      }
    });
  }

  async function validateEmail() {
    const email = document.getElementById('email').value;
    if (!email) {
      showError('emailError', 'Email is required');
      return false;
    }

    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!regex.test(email)) {
      showError('emailError', 'Please enter a valid email');
      return false;
    }

    try {
      const response = await fetch(`${API_URL}/users?email=${encodeURIComponent(email)}`);
      const users = await response.json();
      if (users.length > 0) {
        showError('emailError', 'This email is already registered');
        return false;
      }
    } catch (error) {
      console.error('Email validation error:', error);
      showError('emailError', 'Email validation error');
      return false;
    }
      return true;
  }

  async function validatePhone() {
    const phone = document.getElementById('phone').value;
    if (!phone) {
      showError('phoneError', 'Phone number is required');
      return false;
    }

    const regex = /^\+375(25|29|33|44)\d{7}$/;
    if (!regex.test(phone)) {
      showError('phoneError', 'Please enter number in format +375XXXXXXXXX');
      return false;
    }

    try {
      const response = await fetch(`${API_URL}/users?phone=${encodeURIComponent(phone)}`);
      const users = await response.json();
      if (users.length > 0) {
        showError('phoneError', 'This phone number is already registered');
        return false;
      }
    } catch (error) {
      console.error('Phone validation error:', error);
      showError('phoneError', 'Phone validation error');
      return false;
    }

    return true;
  }

  function validateBirthDate() {
    const birthDateInput = document.getElementById('birthDate');
    if (!birthDateInput.value) {
      showError('birthDateError', 'Birth date is required');
      return false;
    }

    const birthDate = new Date(birthDateInput.value);
    const minDate = new Date();
    minDate.setFullYear(minDate.getFullYear() - 16);
    
    if (birthDate > minDate) {
      showError('birthDateError', 'You must be at least 16 years old');
      return false;
    }
    return true;
  }

  async function validateUsername() {
    const username = document.getElementById('username').value;
    if (!username) {
      showError('usernameError', 'Username is required');
      return false;
    }
    
    try {
      const response = await fetch(`${API_URL}/users?username=${username}`);
      const users = await response.json();
      if (users.length > 0) {
        showError('usernameError', 'This username is already taken');
        return false;
      }
    } catch (error) {
      console.error('Username validation error:', error);
      showError('usernameError', 'Username validation error');
      return false;
    }
    
    return true;
  }

  function validatePassword() {
    if (document.querySelector('input[name="passwordOption"]:checked').value === 'auto') {
      return true;
    }

    const password = document.getElementById('password').value;
    const repeatPassword = document.getElementById('repeatPassword').value;
    let isValid = true;

    if (!password) {
      showError('passwordError', 'Password is required');
      isValid = false;
    } else if (password.length < 8 || password.length > 20) {
      showError('passwordError', 'Password must be 8-20 characters');
      isValid = false;
    } else if (!/[A-Z]/.test(password)) {
      showError('passwordError', 'Add an uppercase letter');
      isValid = false;
    } else if (!/[a-z]/.test(password)) {
      showError('passwordError', 'Add a lowercase letter');
      isValid = false;
    } else if (!/[0-9]/.test(password)) {
      showError('passwordError', 'Add a number');
      isValid = false;
    } else if (!/[!@#$%^&*()]/.test(password)) {
      showError('passwordError', 'Add a special character');
      isValid = false;
    } else if (COMMON_PASSWORDS.includes(password.toLowerCase())) {
      showError('passwordError', 'Password is too common');
      isValid = false;
    }

    if (!repeatPassword) {
      showError('repeatPasswordError', 'Please repeat password');
      isValid = false;
    } else if (password !== repeatPassword) {
      showError('repeatPasswordError', 'Passwords do not match');
      isValid = false;
    }

    return isValid;
  }

  function validateAgreement() {
    if (!document.getElementById('agree').checked) {
      showError('agreeError', 'You must agree to the terms');
      return false;
    }
    return true;
  }

  function generatePassword() {
    const uppercase = 'ABCDEFGHJKLMNPQRSTUVWXYZ';
    const lowercase = 'abcdefghijkmnopqrstuvwxyz';
    const numbers = '23456789';
    const symbols = '!@#$%^&*';
    
    let password = '';
    password += getRandomChar(uppercase);
    password += getRandomChar(lowercase);
    password += getRandomChar(numbers);
    password += getRandomChar(symbols);
    
    const allChars = uppercase + lowercase + numbers + symbols;
    while (password.length < 12) {
      password += getRandomChar(allChars);
    }
    
    return password.split('').sort(() => Math.random() - 0.5).join('');
  }

  function getRandomChar(str) {
    return str[Math.floor(Math.random() * str.length)];
  }

  function validateField(fieldId, validationFn, errorMessage = 'This field is required') {
    const field = document.getElementById(fieldId);
    const value = field.value.trim();
    
    if (!value) {
      showError(fieldId + 'Error', errorMessage);
      return false;
    }
    
    if (!validationFn(value)) {
      showError(fieldId + 'Error', errorMessage);
      return false;
    }
    
    return true;
  }

  function handleRegistrationError(errorData) {
    if (errorData.email) showError('emailError', errorData.email);
    if (errorData.username) showError('usernameError', errorData.username);
    if (errorData.phone) showError('phoneError', errorData.phone);
  }
}

function showError(elementId, message) {
  const element = document.getElementById(elementId);
  if (element) {
    element.textContent = message;
    element.style.display = 'block';
    const inputBox = element.closest('.input-box');
    if (inputBox) {
      inputBox.classList.add('error');
    }
  }
}

function clearError(elementId) {
  const element = document.getElementById(elementId);
  if (element) {
    element.textContent = '';
    element.style.display = 'none';
    const inputBox = element.closest('.input-box');
    if (inputBox) {
      inputBox.classList.remove('error');
    }
  }
}

function initLoginForm() {
  console.log('Login form initialized');
  
  loginForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const login = document.getElementById('login').value;
    const password = document.getElementById('password').value;

    clearError('loginError');
    clearError('passwordError');

    try {
      const response = await fetch(`${API_URL}/users`);
      
      if (!response.ok) {
        throw new Error('Server error');
      }
      
      const allUsers = await response.json();
      
      const user = allUsers.find(u => 
        (u.email && u.email.toLowerCase() === login.toLowerCase()) || 
        (u.username && u.username.toLowerCase() === login.toLowerCase())
      );
      
      if (!user) {
        showError('loginError', 'Invalid login or password');
        return;
      }

      if (user.password !== password) {
        showError('passwordError', 'Invalid password');
        return;
      }

      localStorage.setItem('currentUser', JSON.stringify(user));
      alert(`Welcome, ${user.firstName || user.username}!`);
      window.location.href = 'index.html';

    } catch (error) {
      console.error('Login error:', error);
      showError('loginError', 'Login error. Please try again later.');
    }
  });
}

function showUserPanel(user) {
  const loginContainer = document.getElementById('loginContainer');
  const userPanel = document.getElementById('userPanel');
  
  if (loginContainer) loginContainer.style.display = 'none';
  if (userPanel) {
    userPanel.style.display = 'block';
    document.getElementById('userName').textContent = user.firstName || user.username;
    document.getElementById('userEmail').textContent = user.email;
    document.getElementById('userRole').textContent = user.role;
    
    if (user.role === 'admin') {
      document.getElementById('adminPanelLink').style.display = 'inline-block';
    }
    
    document.getElementById('logoutBtn').addEventListener('click', logout);
    document.getElementById('viewProfileBtn').addEventListener('click', () => {
      alert(`Profile info:\nName: ${user.firstName} ${user.lastName}\nEmail: ${user.email}\nPhone: ${user.phone}`);
    });
  }
}

function logout() {
  const user = JSON.parse(localStorage.getItem('currentUser'));
  const userName = user ? (user.firstName || user.username) : 'User';
  
  localStorage.removeItem('currentUser');
  
  const loginContainer = document.getElementById('loginContainer');
  const userPanel = document.getElementById('userPanel');
  
  if (loginContainer) loginContainer.style.display = 'block';
  if (userPanel) userPanel.style.display = 'none';
  
  alert(`Goodbye, ${userName}! You have successfully logged out.`);
  setTimeout(() => {
    window.location.reload();
  }, 500);
}

function initChangePasswordModal() {
  const modal = document.getElementById('changePasswordModal');
  const changePasswordBtn = document.getElementById('changePasswordBtn');
  const closeBtn = document.querySelector('.close');
  const changePasswordForm = document.getElementById('changePasswordForm');

  if (!modal || !changePasswordBtn) return;

  changePasswordBtn.addEventListener('click', () => {
    modal.style.display = 'flex';
  });

  closeBtn.addEventListener('click', () => {
    modal.style.display = 'none';
    clearPasswordErrors();
  });

  window.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.style.display = 'none';
      clearPasswordErrors();
    }
  });

  changePasswordForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    await handlePasswordChange();
  });
}

function clearPasswordErrors() {
  clearError('currentPasswordError');
  clearError('newPasswordError');
  clearError('confirmPasswordError');
}

async function handlePasswordChange() {
  clearPasswordErrors();

  const currentPassword = document.getElementById('currentPassword').value;
  const newPassword = document.getElementById('newPassword').value;
  const confirmPassword = document.getElementById('confirmNewPassword').value;
  const user = JSON.parse(localStorage.getItem('currentUser'));
  
  let isValid = true;

  // Валидация текущего пароля
  if (!currentPassword) {
    showError('currentPasswordError', 'Current password is required');
    isValid = false;
  } else if (currentPassword !== user.password) {
    showError('currentPasswordError', 'Invalid current password');
    isValid = false;
  }

  // Валидация нового пароля
  if (!newPassword) {
    showError('newPasswordError', 'New password is required');
    isValid = false;
  } else if (newPassword.length < 8 || newPassword.length > 20) {
    showError('newPasswordError', 'Password must be 8-20 characters');
    isValid = false;
  } else if (!/[A-Z]/.test(newPassword)) {
    showError('newPasswordError', 'Add an uppercase letter');
    isValid = false;
  } else if (!/[a-z]/.test(newPassword)) {
    showError('newPasswordError', 'Add a lowercase letter');
    isValid = false;
  } else if (!/[0-9]/.test(newPassword)) {
    showError('newPasswordError', 'Add a number');
    isValid = false;
  } else if (!/[!@#$%^&*()]/.test(newPassword)) {
    showError('newPasswordError', 'Add a special character');
    isValid = false;
  } else if (COMMON_PASSWORDS.includes(newPassword.toLowerCase())) {
    showError('newPasswordError', 'Password is too common');
    isValid = false;
  }

  // Проверка подтверждения пароля
  if (!confirmPassword) {
    showError('confirmPasswordError', 'Please confirm new password');
    isValid = false;
  } else if (newPassword !== confirmPassword) {
    showError('confirmPasswordError', 'Passwords do not match');
    isValid = false;
  }

  if (!isValid) return;

  try {
    // Обновляем пароль в базе данных
    const response = await fetch(`${API_URL}/users/${user.id}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        password: newPassword
      }),
    });

    if (response.ok) {
      // Обновляем пользователя в localStorage
      user.password = newPassword;
      localStorage.setItem('currentUser', JSON.stringify(user));
      
      alert('Password changed successfully!');
      document.getElementById('changePasswordModal').style.display = 'none';
      changePasswordForm.reset();
    } else {
      throw new Error('Password update error');
    }
  } catch (error) {
    console.error('Password change error:', error);
    alert('Password change error. Please try again later.');
  }
}